/*
  Copyright (C) 2011 The SmithDR team, smithdr@labri.fr

  This file is part of SmithDR.

  SmithDR is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 3 of
  the License, or (at your option) any later version.

  SmithDR is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with SmithDR.
  If not, see <http://www.gnu.org/licenses/>.
*/


/*
  Copyright (C) 2011 The SmithDR team, smithdr@labri.fr

  This file is part of SmithDR.

  SmithDR is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 3 of
  the License, or (at your option) any later version.

  SmithDR is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with SmithDR.
  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef SD_CORE_SLICE_ARRAY_HPP
#define SD_CORE_SLICE_ARRAY_HPP

#include <cstdio>
#include <vector>

#include <Types.hpp>

#include "iterators/Iterator.hpp"
#include "iterators/ConstIterator.hpp"

namespace sd {
  
  namespace core {

    template<typename T>
    class Image;

    template<typename T>
    class ImageView_;
    
    /*
     * Slice
     */
    class Slice {

    public:

      Slice();
      Slice(size_t dim, size_t sliceNumber);
      Slice(const Slice&);
      ~Slice();
      
      inline size_t dim() const {return m_dim;}
      inline size_t sliceNumber() const {return m_sliceNumber;}
      
      const Slice& operator=(const Slice&);
      
    private:

      size_t m_dim;
      size_t m_sliceNumber;

    };


    /*
     * SliceArray
     */
    template<typename T>
    class SliceArray {

    public:

      typedef ConstIterator<T> const_iterator;
      typedef Iterator<T> iterator;

      typedef std::reverse_iterator<const_iterator> const_reverse_iterator;
      typedef std::reverse_iterator<iterator> reverse_iterator;
      
      template<typename U>
      SliceArray(const ImageView_<U>&, const Slice&,
		 const std::vector<unsigned int>& channels,
		 const Size& destSize = Size());
      
      virtual ~SliceArray();
      
      SliceArray<T>& operator=(const SliceArray<T>&);
      
      inline const T* getData() const {return m_image.getData();}
      
      inline const sd::core::Image<T>& ressource() const {return m_image;}
      
      // iterators
      virtual const_iterator begin() const;
      virtual const_iterator end() const;
      
      virtual const_reverse_iterator rbegin() const;
      virtual const_reverse_iterator rend() const;
      
      virtual iterator begin();
      virtual iterator end();
      
      virtual reverse_iterator rbegin();
      virtual reverse_iterator rend();
      
    private:
      
      template<typename U>
      void initF(const ImageView_<U>& iv, T*& data, unsigned int nbChannels,
		 const Point& offset, const Size& size, Point& point,
		 const Size& destSize, const std::vector<unsigned int>& channels,
		 const T& min, const T& max,
		 const size_t dimTarget, const size_t dimDest, const size_t dimSrc, const size_t dataSize) const;
      
      template<typename U>
      void init(const ImageView_<U>& iv, T*& data, unsigned int nbChannels,
		const Point& offset, const Size& size, Point& point,
		const Size& destSize, const std::vector<unsigned int>& channels,
		const size_t dimTarget, const size_t dimDest, const size_t dimSrc, const size_t dataSize) const;
      
      SliceArray() = delete;
      
      SliceArray(const SliceArray<T>&) = delete;
      
    private:
      
      sd::core::Image<T> m_image; // store pointers to values
      Slice m_slice;
      
    };
    
  }
  
}

#include "SliceArray.hxx"

#endif /*! SD_CORE_SLICE_ARRAY_HPP */
