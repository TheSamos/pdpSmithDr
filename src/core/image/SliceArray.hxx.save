/*
  Copyright (C) 2011 The SmithDR team, smithdr@labri.fr

  This file is part of SmithDR.

  SmithDR is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 3 of
  the License, or (at your option) any later version.

  SmithDR is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with SmithDR.
  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef SD_CORE_SLICE_ARRAY_HXX
#define SD_CORE_SLICE_ARRAY_HXX

#include "iterators/SliceIterator.hpp"

#include <Types.hpp>

/*
  Copyright (C) 2011 The SmithDR team, smithdr@labri.fr

  This file is part of SmithDR.

  SmithDR is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 3 of
  the License, or (at your option) any later version.

  SmithDR is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with SmithDR.
  If not, see <http://www.gnu.org/licenses/>.
*/

#ifndef SD_CORE_IMAGE_HPP
#include <core/image/Image.hpp>
#endif

namespace sd {
  
  namespace core {
    
    template<typename T>
    template<typename U>
    void
    SliceArray<T>::initF(const ImageView_<U>& iv, T*& data, unsigned int nbChannels,
			 const Point& offset, const Size& size, Point& point,
			 const Size& destSize, const std::vector<unsigned int>& channels,
			 const T& min, const T& mean,
			 const size_t dimTarget, const size_t dimDest, const size_t dimSrc,
			 const size_t dataSize) const {
      size_t max = size[dimSrc];
      if (dimSrc == 0) {
	for (unsigned int i=offset[dimSrc]; i<max; ++i) {
	  point.setAt(dimSrc, i);
	  const Pixel<U> p = iv.getAt(point);
	  for (unsigned int j=0; j<channels.size(); ++j) {
	    *data = (T)((p[channels[j]] - min) / mean);
	    ++data;
	  }
	}
	if (dimTarget!=dimSrc)
	  data += ((destSize[dimDest]-(max-offset[dimSrc]))*(dataSize/destSize[dimDest]));
      } else {
	for (unsigned int i=offset[dimSrc]; i<max; ++i) {
	  point.setAt(dimSrc, i);
	  initF(iv, data, nbChannels,
		offset, size, point,
		destSize, channels,
		min, mean,
		dimTarget, (dimTarget==dimSrc) ? dimDest : (dimDest == 0) ? 0 : dimDest-1, dimSrc-1,
		(dimTarget==dimSrc || dimDest == 0) ? dataSize : dataSize/destSize[dimDest]);
	}
	if (dimTarget!=dimSrc)
	  data += ((destSize[dimDest]-(max-offset[dimSrc]))*(dataSize/destSize[dimDest]));
      }
    }
    
    template<typename T>
    template<typename U>
    void
    SliceArray<T>::init(const ImageView_<U>& iv, T*& data, unsigned int nbChannels,
			const Point& offset, const Size& size, Point& point,
			const Size& destSize, const std::vector<unsigned int>& channels,
			const size_t dimTarget, const size_t dimDest, const size_t dimSrc,
			const size_t dataSize) const {
      size_t max = size[dimSrc];
      if (dimSrc == 0) {
	for (unsigned int i=offset[dimSrc]; i<max; ++i) {
	  point.setAt(dimSrc, i);
	  const Pixel<U> p = iv.getAt(point);
	  for (unsigned int j=0; j<channels.size(); ++j) {
	    *data = (T)p[channels[j]];
	    ++data;
	  }
	}
	if (dimTarget!=dimSrc)
	  data += ((destSize[dimDest]-(max-offset[dimSrc]))*(dataSize/destSize[dimDest]));
      } else {
	for (unsigned int i=offset[dimSrc]; i<max; ++i) {
	  point.setAt(dimSrc, i);
	  init(iv, data, nbChannels,
	       offset, size, point,
	       destSize, channels,
	       dimTarget, (dimTarget==dimSrc) ? dimDest : (dimDest == 0) ? 0 : dimDest-1, dimSrc-1,
	       (dimTarget==dimSrc || dimDest == 0) ? dataSize : dataSize/destSize[dimDest]);
	}
	if (dimTarget!=dimSrc)
	  data += ((destSize[dimDest]-(max-offset[dimSrc]))*(dataSize/destSize[dimDest]));
      }
    }
    
    template<typename T>
    template<typename U>
    SliceArray<T>::SliceArray(const ImageView_<U>& iv, const Slice& s,
			      const std::vector<unsigned int>& channels,
			      const Size& destSize)
      : m_image(),
	m_slice(s) {
      Size size(iv.size());
      Size newSize;
      if (destSize.nbDims() != 0) {
	newSize = destSize;
      } else {
	for (unsigned int i=0; i<size.nbDims(); ++i)
	  if (i != s.dim())
	    newSize.setAt(newSize.nbDims(), size[i]);
      }
      
      ImageViewInfo info = iv.information();
      size.setAt(s.dim(), s.sliceNumber()+1);
      std::vector<unsigned int> usedChannels(channels);
      if (usedChannels.size() == 0) {
	usedChannels.resize(info.nbChannels());
	for (unsigned int i=0; i<usedChannels.size(); ++i)
	  usedChannels[i] = i;
      }
      m_image.init(ImageViewInfo(info.colorSpace(),
				 usedChannels.size(),
				 info.orientation(),
				 newSize,
				 info.resolution(),
				 info.spaceUnit(),
				 info.timeUnit()));
      Point offset;
      if (s.dim()<iv.size().nbDims() || s.sliceNumber() == 0)
	offset.setAt(s.dim(), s.sliceNumber());
      Point point(offset);
      unsigned int nbChannels = info.nbChannels();
      T* data = m_image.getData();
      
      if (DataType_<T>() == DataType_<float>() || DataType_<T>() == DataType_<double>())
	initF(iv, data, nbChannels, offset, size, point,
	      newSize, usedChannels, iv.getMin(), iv.getMax()-iv.getMin(),
	      s.dim(), size.nbDims()-1, size.nbDims()-1, newSize.dataSize()*usedChannels.size());
      else
	init(iv, data, nbChannels, offset, size, point,
	     newSize, usedChannels,
	     s.dim(), newSize.nbDims()-1, size.nbDims()-1, newSize.dataSize()*usedChannels.size());
    }
    
    template<typename T>
    SliceArray<T>::~SliceArray()
    {}

    template<typename T>
    SliceArray<T>&
    SliceArray<T>::operator=(const SliceArray<T>& rhs) {
      if (&rhs != this) {
	m_image = rhs.m_image;
	m_slice = rhs.m_slice;
      }
      return *this;
    }

    // iterators
    template<typename T>
    typename SliceArray<T>::const_iterator
    SliceArray<T>::begin() const {
      return m_image.begin();
    }

    template<typename T>
    typename SliceArray<T>::const_iterator
    SliceArray<T>::end() const {
      return m_image.end();
    }

    template<typename T>
    typename SliceArray<T>::const_reverse_iterator
    SliceArray<T>::rbegin() const {
      return m_image.rbegin();
    }

    template<typename T>
    typename SliceArray<T>::const_reverse_iterator
    SliceArray<T>::rend() const {
      return m_image.rend();
    }

    template<typename T>
    typename SliceArray<T>::iterator
    SliceArray<T>::begin() {
      return m_image.begin();
    }

    template<typename T>
    typename SliceArray<T>::iterator
    SliceArray<T>::end() {
      return m_image.end();
    }

    template<typename T>
    typename SliceArray<T>::reverse_iterator
    SliceArray<T>::rbegin() {
      return m_image.rbegin();
    }

    template<typename T>
    typename SliceArray<T>::reverse_iterator
    SliceArray<T>::rend() {
      return m_image.rend();

    }

  }
  
}

#endif /*! SD_CORE_SLICE_ARRAY_HXX */
