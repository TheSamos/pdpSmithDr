/*
  Copyright (C) 2011 The SmithDR team, smithdr@labri.fr

  This file is part of SmithDR.

  SmithDR is free software: you can redistribute it and/or modify
  it under the terms of the GNU Lesser General Public License as
  published by the Free Software Foundation, either version 3 of
  the License, or (at your option) any later version.

  SmithDR is distributed in the hope that it will be useful,
  but WITHOUT ANY WARRANTY; without even the implied warranty of
  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
  GNU Lesser General Public License for more details.

  You should have received a copy of the GNU Lesser General Public
  License along with SmithDR.
  If not, see <http://www.gnu.org/licenses/>.
*/

#include <Types.hpp>

#include <core/mesh/MeshView_.hpp>

#include <core/DynamicDimensionalCoordinates.hpp>
#include <core/Vector3d.hpp>
#include <core/DataType.hpp>

#include <core/Point.hpp>

#include <iostream>

#include <meshprocessing/noise/WhiteNoise.hpp>
#include <meshprocessing/noise/MeshNoiserNormalOrientation.hpp>
#include <meshprocessing/noise/MeshNoiserAllDirections.hpp>

#include <meshprocessing/generator/UVSphereGenerator.hpp>

static const
double dolphin_points[] = {
  -44.254815, -8.130001, 319.665355,
  -38.924823, 0.000000, 320.425353,
  -77.524816, 0.000000, 355.225360,
  -85.144815, -6.100000, 353.955322,
  -110.544817, 0.000000, 371.225299,
  -113.854815, -3.560000, 368.185365,
  -142.044814, 0.000000, 373.515331,
  -143.824821, -1.270000, 369.195320,
  -160.074818, 0.000000, 368.685366,
  -142.554811, -9.910000, 310.015320,
  -142.044814, 0.000000, 328.045352,
  -152.714815, 0.000000, 303.155348,
  -102.924818, -11.680000, 317.885334,
  -117.914815, -6.100000, 339.225364,
  -128.584808, -3.560000, 350.905349,
  126.945199, 0.000000, 221.115336,
  132.275195, -7.620000, 213.245336,
  137.355189, 0.000000, 209.435336,
  109.415197, 0.000000, 236.865331,
  113.225190, -13.970000, 230.515327,
  88.585193, -5.330000, 251.345331,
  83.765188, 0.000000, 256.165344,
  49.725189, 0.000000, 279.785339,
  50.745180, -18.290001, 273.695317,
  87.575180, -13.970000, 249.305343,
  7.055184, 0.000000, 300.365342,
  7.815186, -22.350002, 295.025337,
  -41.204820, -24.640000, 304.685353,
  -99.374822, -26.670000, 303.155348,
  -155.504820, -20.320000, 291.215338,
  -221.804818, -11.680000, 255.155331,
  -223.074827, 0.000000, 259.215346,
  -263.714813, 0.000000, 224.165352,
  -256.094813, -14.730000, 215.015333,
  -281.744816, 0.000000, 200.545328,
  -271.834813, -11.940000, 188.095350,
  -294.194838, 0.000000, 176.665351,
  -284.794818, -7.870000, 165.235324,
  -300.284831, 0.000000, 156.595345,
  -294.694839, -9.650000, 149.235328,
  -296.474803, 0.000000, 137.805329,
  -292.414817, -7.370000, 141.615329,
  90.115192, -22.350002, 242.955324,
  73.855178, -32.770000, 241.685344,
  44.395190, -29.970001, 259.725357,
  7.305183, -31.999999, 276.235336,
  -41.204820, -35.810002, 286.905336,
  -91.754815, -34.040002, 285.635327,
  -152.204803, -28.450001, 277.755332,
  -218.494820, -18.290001, 248.295330,
  85.535192, -36.580003, 228.735335,
  95.695195, -31.750002, 230.255316,
  103.315187, -27.430002, 223.145329,
  119.575187, -20.830001, 206.125339,
  133.795190, -10.160000, 191.905335,
  83.255191, -35.810002, 218.825318,
  94.175192, -30.990000, 223.145329,
  135.575183, -13.970000, 184.285350,
  128.715181, -14.990000, 174.635315,
  155.385193, -7.370000, 151.515321,
  160.465187, -7.370000, 153.805340,
  165.295166, -4.060000, 149.995340,
  166.565190, 0.000000, 151.515321,
  142.945195, 0.000000, 183.015326,
  140.145194, -5.080000, 185.305330,
  104.085195, -30.480000, 209.435336,
  96.715182, -30.730001, 217.305336,
  103.065186, -30.730001, 206.635321,
  116.525192, -26.420001, 202.065338,
  113.225190, -25.910001, 196.735328,
  124.905182, -16.260001, 170.825315,
  149.035189, -8.380001, 150.505308,
  106.625185, -25.910001, 185.805332,
  97.735184, -34.540004, 201.045330,
  74.875186, -34.800000, 193.175330,
  104.085195, -27.430002, 180.225350,
  92.655182, -34.800000, 206.385320,
  90.615193, -34.540004, 215.525330,
  76.905187, -38.610003, 204.855329,
  123.385200, -18.290001, 165.745335,
  145.225189, -10.920001, 147.705322,
  100.015185, -17.020001, 158.635319,
  86.805194, -31.750002, 188.095350,
  64.455187, -22.350002, 168.025329,
  117.545186, -10.160000, 157.865325,
  122.875189, -17.270002, 162.185337,
  36.005191, -43.180001, 189.365330,
  34.235183, -35.050001, 179.455328,
  72.585190, -40.389999, 205.875338,
  32.965181, -49.280000, 219.595340,
  67.505188, -40.130003, 223.655340,
  66.485187, -36.580003, 236.605349,
  36.265183, -42.670000, 243.215349,
  4.765183, -46.230002, 252.865327,
  -7.174813, -51.050000, 227.715341,
  -45.774810, -48.010002, 255.155331,
  -50.854816, -51.050000, 236.355348,
  -93.784816, -46.230002, 260.235340,
  -95.814823, -49.020000, 236.605349,
  -149.664813, -43.939999, 254.135337,
  -149.154816, -44.700004, 227.215339,
  -208.844828, -33.020001, 229.245332,
  -198.684824, -28.450001, 206.895332,
  -244.154832, -23.370001, 204.355327,
  -229.424831, -21.840001, 184.535351,
  -261.934820, -13.970000, 180.225350,
  -251.264820, -14.220000, 169.295324,
  -273.874830, -9.910000, 163.715342,
  -263.204830, -10.670001, 156.855356,
  -288.094834, -18.290001, 145.425328,
  -2.854813, -41.150004, 194.955322,
  -52.384818, -37.590002, 202.315339,
  -90.224817, -38.099999, 204.355327,
  -138.484816, -30.990000, 201.815337,
  -188.274820, -17.270002, 188.345336,
  -221.804818, -9.650000, 168.285340,
  -242.624827, -7.110000, 159.905343,
  -263.714813, -5.590000, 142.885324,
  -273.104794, -11.939999, 134.755342,
  7.815186, -73.660008, 164.215344,
  8.575188, -71.370004, 161.425324,
  -14.284814, -64.519998, 175.395327,
  -37.904818, -77.220006, 160.155344,
  -23.684816, -80.770002, 157.365324,
  -3.364815, -80.010004, 159.905343,
  -48.824816, 0.000000, 189.115329,
  -5.394814, 0.000000, 179.205327,
  -136.204822, 0.000000, 190.885326,
  -191.574822, 0.000000, 184.035349,
  -239.074823, 0.000000, 157.365324,
  -263.454845, 0.000000, 140.855345,
  59.885196, 0.000000, 165.485325,
  25.085175, 0.000000, 172.605322,
  92.145192, 0.000000, 155.835332,
  114.745178, 0.000000, 155.835332,
  139.645193, 0.000000, 143.395335,
  142.685184, -7.870000, 144.665345,
  158.435180, 0.000000, 135.265325,
  156.155186, -4.570000, 137.545318,
  -300.034816, -86.610002, 84.715337,
  -285.304829, -73.150003, 111.385319,
  -298.764835, -63.250003, 93.355315,
  -297.494826, -9.650000, 116.975347,
  -291.904834, -16.510000, 131.195314,
  -295.964820, 0.000000, 125.105321,
  -302.064823, -5.840000, 108.085331,
  -298.254823, 0.000000, 115.195318,
  -286.314842, -24.129999, 142.885324,
  162.755191, -3.810000, 144.665345,
  163.265202, 0.000000, 144.915345,
  160.975199, -4.830000, 139.585336,
  162.755191, 0.000000, 138.815342,
  -23.934815, -79.249999, 156.095343,
  -3.864815, -78.230005, 157.105356,
  -151.444834, 0.000000, 348.875313,
  -163.124819, 0.000000, 360.565308,
  -92.004816, 0.000000, 192.665347,
  -218.754831, 0.000000, 167.525342,
  -273.364819, 0.000000, 132.215337,
  -283.524808, -73.150003, 109.605320,
  -278.444828, -52.320003, 124.595338,
  -281.494830, -52.320003, 127.645326,
  -300.284831, -21.590000, 101.225344,
  87.065190, 0.000000, 254.135337,
  -85.144815, 6.100000, 353.955322,
  -44.254815, 8.130001, 319.665355,
  -113.854815, 3.560000, 368.185365,
  -143.824821, 1.270000, 369.195320,
  -142.554811, 9.910000, 310.015320,
  -117.914815, 6.100000, 339.225364,
  -102.924818, 11.680000, 317.885334,
  -128.584808, 3.560000, 350.905349,
  132.275195, 7.620000, 213.245336,
  113.225190, 13.970000, 230.515327,
  88.585193, 5.330000, 251.345331,
  87.575180, 13.970000, 249.305343,
  50.745180, 18.290001, 273.695317,
  7.815186, 22.350002, 295.025337,
  -41.204820, 24.640000, 304.685353,
  -99.374822, 26.670000, 303.155348,
  -155.504820, 20.320000, 291.215338,
  -221.804818, 11.680000, 255.155331,
  -256.094813, 14.730000, 215.015333,
  -271.834813, 11.940000, 188.095350,
  -284.794818, 7.870000, 165.235324,
  -294.694839, 9.650000, 149.235328,
  -292.414817, 7.370000, 141.615329,
  90.115192, 22.350002, 242.955324,
  73.855178, 32.770000, 241.685344,
  44.395190, 29.970001, 259.725357,
  7.305183, 31.999999, 276.235336,
  -41.204820, 35.810002, 286.905336,
  -91.754815, 34.040002, 285.635327,
  -152.204803, 28.450001, 277.755332,
  -218.494820, 18.290001, 248.295330,
  95.695195, 31.750002, 230.255316,
  85.535192, 36.580003, 228.735335,
  103.315187, 27.430002, 223.145329,
  119.575187, 20.830001, 206.125339,
  133.795190, 10.160000, 191.905335,
  94.175192, 30.990000, 223.145329,
  83.255191, 35.810002, 218.825318,
  135.575183, 13.970000, 184.285350,
  160.465187, 7.370000, 153.805340,
  155.385193, 7.370000, 151.515321,
  128.715181, 14.990000, 174.635315,
  140.145194, 5.080000, 185.305330,
  165.295166, 4.060000, 149.995340,
  103.065186, 30.730001, 206.635321,
  96.715182, 30.730001, 217.305336,
  104.085195, 30.480000, 209.435336,
  116.525192, 26.420001, 202.065338,
  113.225190, 25.910001, 196.735328,
  149.035189, 8.380001, 150.505308,
  124.905182, 16.260001, 170.825315,
  106.625185, 25.910001, 185.805332,
  97.735184, 34.540004, 201.045330,
  104.085195, 27.430002, 180.225350,
  74.875186, 34.800000, 193.175330,
  92.655182, 34.800000, 206.385320,
  90.615193, 34.540004, 215.525330,
  76.905187, 38.610003, 204.855329,
  145.225189, 10.920001, 147.705322,
  123.385200, 18.290001, 165.745335,
  86.805194, 31.750002, 188.095350,
  100.015185, 17.020001, 158.635319,
  64.455187, 22.350002, 168.025329,
  122.875189, 17.270002, 162.185337,
  117.545186, 10.160000, 157.865325,
  34.235183, 35.050001, 179.455328,
  36.005191, 43.180001, 189.365330,
  32.965181, 49.280000, 219.595340,
  72.585190, 40.389999, 205.875338,
  67.505188, 40.130003, 223.655340,
  66.485187, 36.580003, 236.605349,
  36.265183, 42.670000, 243.215349,
  -7.174813, 51.050000, 227.715341,
  4.765183, 46.230002, 252.865327,
  -50.854816, 51.050000, 236.355348,
  -45.774810, 48.010002, 255.155331,
  -95.814823, 49.020000, 236.605349,
  -93.784816, 46.230002, 260.235340,
  -149.154816, 44.700004, 227.215339,
  -149.664813, 43.939999, 254.135337,
  -198.684824, 28.450001, 206.895332,
  -208.844828, 33.020001, 229.245332,
  -229.424831, 21.840001, 184.535351,
  -244.154832, 23.370001, 204.355327,
  -251.264820, 14.220000, 169.295324,
  -261.934820, 13.970000, 180.225350,
  -263.204830, 10.670001, 156.855356,
  -273.874830, 9.910000, 163.715342,
  -288.094834, 18.290001, 145.425328,
  -2.854813, 41.150004, 194.955322,
  -52.384818, 37.590002, 202.315339,
  -90.224817, 38.099999, 204.355327,
  -138.484816, 30.990000, 201.815337,
  -188.274820, 17.270002, 188.345336,
  -221.804818, 9.650000, 168.285340,
  -242.624827, 7.110000, 159.905343,
  -263.714813, 5.590000, 142.885324,
  -273.104794, 11.940000, 134.755342,
  8.575188, 71.370004, 161.425324,
  7.815186, 73.660008, 164.215344,
  -14.284814, 64.519998, 175.395327,
  -37.904818, 77.220006, 160.155344,
  -3.364815, 80.010004, 159.905343,
  -23.684816, 80.770002, 157.365324,
  142.685184, 7.870000, 144.665345,
  156.155186, 4.570000, 137.545318,
  -298.764835, 63.250003, 93.355315,
  -285.304829, 73.150003, 111.385319,
  -300.034816, 86.610002, 84.715337,
  -291.904834, 16.510000, 131.195314,
  -297.494826, 9.650000, 116.975347,
  -302.064823, 5.840000, 108.085331,
  -286.314842, 24.129999, 142.885324,
  162.755191, 3.810000, 144.665345,
  160.975199, 4.830000, 139.585336,
  -3.864815, 78.230005, 157.105356,
  -23.934815, 79.249999, 156.095343,
  -281.494830, 52.320003, 127.645326,
  -278.444828, 52.320003, 124.595338,
  -283.524808, 73.150003, 109.605320,
  -300.284831, 21.590000, 101.225344
};

static const
int dolphin_faces[] = {
  2, 1, 0,
  0, 3, 2,
  4, 2, 3,
  3, 5, 4,
  6, 4, 5,
  5, 7, 6,
  8, 6, 7,
  11, 10, 9,
  3, 0, 12,
  12, 13, 3,
  5, 3, 13,
  13, 14, 5,
  7, 5, 14,
  17, 16, 15,
  18, 15, 16,
  16, 19, 18,
  22, 21, 20,
  20, 23, 22,
  23, 20, 24,
  25, 22, 23,
  23, 26, 25,
  1, 25, 26,
  26, 0, 1,
  27, 0, 26,
  12, 0, 27,
  27, 28, 12,
  9, 12, 28,
  28, 29, 9,
  11, 9, 29,
  11, 29, 30,
  30, 31, 11,
  32, 31, 30,
  30, 33, 32,
  34, 32, 33,
  33, 35, 34,
  36, 34, 35,
  35, 37, 36,
  38, 36, 37,
  37, 39, 38,
  40, 38, 39,
  39, 41, 40,
  24, 19, 42,
  24, 42, 43,
  24, 43, 44,
  44, 23, 24,
  26, 23, 44,
  44, 45, 26,
  27, 26, 45,
  45, 46, 27,
  28, 27, 46,
  46, 47, 28,
  29, 28, 47,
  47, 48, 29,
  30, 29, 48,
  48, 49, 30,
  33, 30, 49,
  51, 50, 43,
  43, 42, 51,
  52, 51, 42,
  42, 19, 52,
  53, 52, 19,
  19, 16, 53,
  54, 53, 16,
  56, 55, 50,
  50, 51, 56,
  52, 56, 51,
  54, 57, 53,
  60, 59, 58,
  58, 57, 60,
  63, 62, 61,
  61, 64, 63,
  64, 54, 16,
  16, 17, 64,
  63, 64, 17,
  66, 52, 65,
  65, 67, 66,
  52, 53, 68,
  68, 65, 52,
  67, 65, 68,
  68, 69, 67,
  69, 68, 57,
  57, 58, 69,
  70, 58, 59,
  59, 71, 70,
  69, 58, 70,
  70, 72, 69,
  73, 67, 69,
  74, 73, 72,
  72, 75, 74,
  57, 54, 64,
  66, 67, 76,
  77, 66, 76,
  55, 77, 76,
  78, 55, 76,
  73, 78, 76,
  67, 73, 76,
  71, 80, 79,
  79, 70, 71,
  70, 79, 75,
  75, 72, 70,
  82, 75, 81,
  81, 74, 82,
  74, 81, 83,
  84, 81, 75,
  75, 85, 84,
  86, 74, 83,
  83, 87, 86,
  88, 74, 86,
  86, 89, 88,
  88, 78, 74,
  55, 78, 88,
  88, 90, 55,
  43, 50, 55,
  55, 91, 43,
  91, 55, 90,
  92, 90, 88,
  88, 89, 92,
  93, 92, 89,
  89, 94, 93,
  95, 93, 94,
  94, 96, 95,
  97, 95, 96,
  96, 98, 97,
  99, 97, 98,
  98, 100, 99,
  101, 99, 100,
  100, 102, 101,
  103, 101, 102,
  102, 104, 103,
  105, 103, 104,
  104, 106, 105,
  107, 105, 106,
  106, 108, 107,
  91, 90, 92,
  44, 91, 92,
  43, 91, 44,
  45, 44, 92,
  92, 93, 45,
  46, 45, 93,
  93, 95, 46,
  47, 46, 95,
  95, 97, 47,
  48, 47, 97,
  97, 99, 48,
  49, 48, 99,
  99, 101, 49,
  33, 49, 101,
  101, 103, 33,
  35, 33, 103,
  103, 105, 35,
  37, 35, 105,
  105, 107, 37,
  39, 37, 107,
  107, 109, 39,
  41, 39, 109,
  94, 89, 86,
  86, 110, 94,
  96, 94, 110,
  110, 111, 96,
  98, 96, 111,
  111, 112, 98,
  100, 98, 112,
  112, 113, 100,
  102, 100, 113,
  113, 114, 102,
  104, 102, 114,
  114, 115, 104,
  106, 104, 115,
  115, 116, 106,
  108, 106, 116,
  116, 117, 108,
  118, 108, 117,
  119, 86, 87,
  87, 120, 119,
  110, 86, 119,
  119, 121, 110,
  122, 121, 119,
  119, 123, 122,
  123, 119, 124,
  125, 111, 110,
  110, 126, 125,
  114, 113, 127,
  127, 128, 114,
  117, 116, 129,
  129, 130, 117,
  87, 83, 131,
  131, 132, 87,
  110, 87, 132,
  132, 126, 110,
  83, 81, 133,
  133, 131, 83,
  81, 84, 134,
  134, 133, 81,
  84, 136, 135,
  135, 134, 84,
  84, 85, 136,
  138, 137, 135,
  135, 136, 138,
  141, 140, 139,
  41, 143, 142,
  142, 144, 41,
  144, 142, 145,
  145, 146, 144,
  147, 109, 107,
  107, 108, 147,
  118, 147, 108,
  60, 57, 64,
  64, 61, 60,
  149, 148, 61,
  61, 62, 149,
  60, 61, 148,
  148, 59, 60,
  75, 79, 85,
  80, 136, 85,
  85, 79, 80,
  136, 80, 138,
  150, 138, 80,
  80, 71, 150,
  148, 150, 71,
  71, 59, 148,
  137, 138, 150,
  150, 151, 137,
  148, 149, 151,
  151, 150, 148,
  56, 52, 66,
  77, 55, 56,
  74, 78, 73,
  57, 68, 53,
  66, 77, 56,
  153, 152, 123,
  123, 124, 153,
  124, 119, 120,
  120, 153, 124,
  122, 123, 152,
  121, 120, 87,
  87, 110, 121,
  122, 152, 153,
  153, 121, 122,
  121, 153, 120,
  10, 13, 12,
  12, 9, 10,
  10, 154, 14,
  14, 13, 10,
  154, 155, 8,
  8, 14, 154,
  14, 8, 7,
  113, 112, 156,
  156, 127, 113,
  156, 112, 111,
  111, 125, 156,
  129, 116, 115,
  115, 157, 129,
  128, 157, 115,
  115, 114, 128,
  117, 130, 158,
  158, 118, 117,
  160, 159, 140,
  140, 161, 160,
  161, 147, 118,
  118, 160, 161,
  139, 140, 159,
  41, 144, 40,
  118, 158, 146,
  146, 145, 162,
  162, 118, 146,
  118, 162, 160,
  162, 141, 159,
  159, 160, 162,
  159, 141, 139,
  140, 141, 162,
  162, 161, 140,
  162, 145, 142,
  142, 161, 162,
  161, 142, 143,
  161, 143, 147,
  143, 41, 109,
  109, 147, 143,
  21, 163, 20,
  19, 20, 163,
  163, 18, 19,
  19, 24, 20,
  1, 2, 164,
  164, 165, 1,
  2, 4, 166,
  166, 164, 2,
  4, 6, 167,
  167, 166, 4,
  167, 6, 8,
  168, 10, 11,
  165, 164, 169,
  169, 170, 165,
  164, 166, 171,
  171, 169, 164,
  171, 166, 167,
  15, 172, 17,
  15, 18, 173,
  173, 172, 15,
  174, 21, 22,
  22, 175, 174,
  175, 22, 176,
  22, 25, 177,
  177, 176, 22,
  25, 1, 165,
  165, 177, 25,
  177, 165, 178,
  165, 170, 179,
  179, 178, 165,
  170, 168, 180,
  180, 179, 170,
  180, 168, 11,
  180, 11, 31,
  31, 181, 180,
  31, 32, 182,
  182, 181, 31,
  32, 34, 183,
  183, 182, 32,
  34, 36, 184,
  184, 183, 34,
  36, 38, 185,
  185, 184, 36,
  38, 40, 186,
  186, 185, 38,
  187, 173, 175,
  188, 187, 175,
  188, 175, 176,
  176, 189, 188,
  176, 177, 190,
  190, 189, 176,
  177, 178, 191,
  191, 190, 177,
  178, 179, 192,
  192, 191, 178,
  179, 180, 193,
  193, 192, 179,
  180, 181, 194,
  194, 193, 180,
  194, 181, 182,
  196, 195, 187,
  187, 188, 196,
  195, 197, 173,
  173, 187, 195,
  173, 197, 198,
  198, 172, 173,
  172, 198, 199,
  201, 200, 195,
  195, 196, 201,
  195, 200, 197,
  198, 202, 199,
  204, 203, 202,
  202, 205, 204,
  62, 63, 206,
  206, 207, 62,
  199, 206, 17,
  17, 172, 199,
  17, 206, 63,
  197, 209, 208,
  208, 210, 197,
  198, 197, 210,
  210, 211, 198,
  210, 208, 212,
  212, 211, 210,
  211, 212, 205,
  205, 202, 211,
  205, 214, 213,
  213, 204, 205,
  205, 212, 215,
  215, 214, 205,
  212, 208, 216,
  216, 218, 217,
  217, 215, 216,
  206, 199, 202,
  219, 208, 209,
  219, 209, 220,
  219, 220, 201,
  219, 201, 221,
  219, 221, 216,
  219, 216, 208,
  222, 213, 214,
  214, 223, 222,
  223, 214, 215,
  215, 217, 223,
  225, 217, 224,
  224, 226, 225,
  226, 224, 218,
  225, 228, 227,
  227, 217, 225,
  218, 230, 229,
  229, 226, 218,
  218, 232, 231,
  231, 230, 218,
  218, 221, 232,
  221, 201, 233,
  233, 232, 221,
  201, 196, 188,
  188, 233, 201,
  233, 188, 234,
  233, 235, 231,
  231, 232, 233,
  235, 237, 236,
  236, 231, 235,
  237, 239, 238,
  238, 236, 237,
  239, 241, 240,
  240, 238, 239,
  241, 243, 242,
  242, 240, 241,
  243, 245, 244,
  244, 242, 243,
  245, 247, 246,
  246, 244, 245,
  247, 249, 248,
  248, 246, 247,
  249, 251, 250,
  250, 248, 249,
  235, 233, 234,
  235, 234, 189,
  189, 234, 188,
  189, 190, 237,
  237, 235, 189,
  190, 191, 239,
  239, 237, 190,
  191, 192, 241,
  241, 239, 191,
  192, 193, 243,
  243, 241, 192,
  193, 194, 245,
  245, 243, 193,
  194, 182, 247,
  247, 245, 194,
  182, 183, 249,
  249, 247, 182,
  183, 184, 251,
  251, 249, 183,
  184, 185, 252,
  252, 251, 184,
  252, 185, 186,
  231, 236, 253,
  253, 230, 231,
  236, 238, 254,
  254, 253, 236,
  238, 240, 255,
  255, 254, 238,
  240, 242, 256,
  256, 255, 240,
  242, 244, 257,
  257, 256, 242,
  244, 246, 258,
  258, 257, 244,
  246, 248, 259,
  259, 258, 246,
  248, 250, 260,
  260, 259, 248,
  260, 250, 261,
  230, 263, 262,
  262, 229, 230,
  230, 253, 264,
  264, 263, 230,
  263, 264, 265,
  265, 266, 263,
  266, 265, 267,
  254, 125, 126,
  126, 253, 254,
  256, 257, 128,
  128, 127, 256,
  259, 260, 130,
  130, 129, 259,
  226, 229, 132,
  132, 131, 226,
  229, 253, 126,
  126, 132, 229,
  225, 226, 131,
  131, 133, 225,
  228, 225, 133,
  133, 134, 228,
  268, 228, 134,
  134, 135, 268,
  268, 227, 228,
  137, 269, 268,
  268, 135, 137,
  272, 271, 270,
  273, 186, 144,
  144, 274, 273,
  274, 144, 146,
  146, 275, 274,
  252, 276, 250,
  250, 251, 252,
  250, 276, 261,
  202, 203, 207,
  207, 206, 202,
  277, 149, 62,
  62, 207, 277,
  207, 203, 204,
  204, 277, 207,
  227, 223, 217,
  268, 222, 223,
  223, 227, 268,
  269, 222, 268,
  269, 278, 213,
  213, 222, 269,
  278, 277, 204,
  204, 213, 278,
  269, 137, 151,
  151, 278, 269,
  149, 277, 278,
  278, 151, 149,
  209, 197, 200,
  200, 201, 220,
  216, 221, 218,
  198, 211, 202,
  200, 220, 209,
  280, 279, 266,
  266, 267, 280,
  263, 266, 279,
  279, 262, 263,
  280, 267, 265,
  262, 264, 253,
  253, 229, 262,
  279, 280, 265,
  265, 262, 279,
  262, 265, 264,
  169, 10, 168,
  168, 170, 169,
  154, 10, 169,
  169, 171, 154,
  8, 155, 154,
  154, 167, 8,
  167, 154, 171,
  255, 256, 127,
  127, 156, 255,
  255, 156, 125,
  125, 254, 255,
  259, 129, 157,
  157, 258, 259,
  157, 128, 257,
  257, 258, 157,
  130, 260, 261,
  261, 158, 130,
  283, 282, 281,
  281, 271, 283,
  276, 281, 282,
  282, 261, 276,
  283, 271, 272,
  40, 144, 186,
  146, 158, 261,
  284, 275, 146,
  146, 282, 284,
  282, 146, 261,
  270, 284, 282,
  282, 283, 270,
  272, 270, 283,
  270, 271, 281,
  281, 284, 270,
  275, 284, 281,
  281, 274, 275,
  273, 274, 281,
  276, 273, 281,
  186, 273, 276,
  276, 252, 186,
  174, 163, 21,
  174, 173, 18,
  18, 163, 174,
  174, 175, 173,
  216, 215, 212,
  69, 72, 73
};

int main(int /*argc*/, char* /*argv*/[]){
  
  typedef double T;
  const unsigned int N=3;
  
  // create result mesh
  size_t nbFaces = sizeof(dolphin_faces) / (N*sizeof(dolphin_faces[0]));
  size_t nbVertices = sizeof(dolphin_points) / (3*sizeof(dolphin_points[0]));

  sd::core::Vector<T> vertices(dolphin_points, dolphin_points+3*nbVertices);
  sd::core::Vector<unsigned int> faces(dolphin_faces, dolphin_faces+N*nbFaces);
  
  sd::core::Vector<unsigned char> colors(sd::core::RGBCoordinates<unsigned char>::card()*nbVertices, 255);
  for (size_t i = 0; i < nbVertices; ++i) {
    colors[sd::core::RGBCoordinates<unsigned char>::card()*i+0] = (i*nbVertices*3)%256;
    colors[sd::core::RGBCoordinates<unsigned char>::card()*i+1] = (i*nbVertices)%256;
    colors[sd::core::RGBCoordinates<unsigned char>::card()*i+2] = (i*nbVertices*2)%256;
  }

  sd::core::MeshView_<T, N>* mesh;
  for (unsigned int i=0; i<1; ++i) {
    mesh = new sd::core::MeshView_<T, N>("", vertices, faces, sd::core::Vector<unsigned int>(), sd::core::Vector<sd::core::Normal<T>::type>(), colors);
    delete mesh;
  }
  
  mesh = new sd::core::MeshView_<T, N>("", vertices, faces, sd::core::Vector<unsigned int>(), sd::core::Vector<sd::core::Normal<T>::type>(), colors);
  sd::core::MeshView_<T, N>* meshV = new sd::core::MeshView_<T, N>(mesh, mesh->name());
  assert(meshV->beginVertices() != meshV->endVertices());
  sd::core::MeshView_<T, N>::vertices_const_iterator it0 = mesh->beginVertices();
  const sd::core::MeshView_<T, N>::vertices_const_iterator end0 = mesh->endVertices();
  sd::core::MeshView_<T, N>::vertices_const_geometry_iterator it1 = meshV->beginVerticesConstGeometry();
  const sd::core::MeshView_<T, N>::vertices_const_geometry_iterator end1 = meshV->endVerticesConstGeometry();
  for (; it0 != end0; ++it0, ++it1) {
    assert(!(*it1).isSelected());
    (*it1).setSelected(true);
    assert((*it1).isSelected());
    (*it1).setSelected(false);
    assert(!(*it1).isSelected());
    (*it1).setSelected(true);
    
    assert(it1 != end1);
    assert((*it0).x() == (*it1).x()
	   && (*it0).y() == (*it1).y()
	   && (*it0).z() == (*it1).z());
    std::cerr << (*it0).x() << ", " << (*it0).y() << ", " << (*it0).z() << std::endl;
    (*it1).setRGBCoordinates(sd::core::RGBCoordinates<unsigned char>((unsigned char)0,(unsigned char)0,(unsigned char)0));
    assert((*it1).getRGBCoordinates() == sd::core::RGBCoordinates<unsigned char>((unsigned char)0,(unsigned char)0,(unsigned char)0));
  }
  
  meshV->removeVerticesSelection();
  sd::core::MeshView_<T, N>::vertices_const_geometry_iterator it2 = meshV->beginVerticesConstGeometry();
  const sd::core::MeshView_<T, N>::vertices_const_geometry_iterator end2 = meshV->endVerticesConstGeometry();
  for (; it2 != end2; ++it2) {
    assert(!(*it2).isSelected());
    (*it2).getRGBCoordinates() == sd::core::RGBCoordinates<unsigned char>((unsigned char)0,(unsigned char)0,(unsigned char)0);
    assert((*it2).getRGBCoordinates() == sd::core::RGBCoordinates<unsigned char>((unsigned char)0,(unsigned char)0,(unsigned char)0));
  }
  
  for (unsigned int i=0; i<2000; ++i) {
    sd::core::VertexFromMeshView<T> v = meshV->addVertex((T)i, (T)0., (T)0.);
    v.setRGBCoordinates(sd::core::RGBCoordinates<unsigned char>((unsigned char)0,(unsigned char)0,(unsigned char)0));
    assert(v.getRGBCoordinates() == sd::core::RGBCoordinates<unsigned char>((unsigned char)0,(unsigned char)0,(unsigned char)0));
  }
  
  sd::core::MeshView_<T, N>::vertices_const_geometry_iterator it3 = meshV->beginVerticesConstGeometry();
  const sd::core::MeshView_<T, N>::vertices_const_geometry_iterator end3 = meshV->endVerticesConstGeometry();
  for (; it3 != end3; ++it3) {
    assert((*it3).isRGBCoordinatesSet());
    assert((*it3).getRGBCoordinates() == sd::core::RGBCoordinates<unsigned char>((unsigned char)0,(unsigned char)0,(unsigned char)0));
  }
  
  delete mesh;

  assert(sd::core::DataType_<sd::UINT>().isBasicType() == true);
  assert(sd::core::DataType_<std::string>().isBasicType() == false);
  
  sd::core::Vector<T> v(3);
  
  {
    sd::core::Vector3d<T> test(&v, 0, false);
    std::cerr << test.x() << ", " << test.y() << ", " << test.z() << std::endl;
  }
  {
    sd::core::Vector3d<T> test(0., 0., 0.);
    std::cerr << test.x() << ", " << test.y() << ", " << test.z() << std::endl;
  }
  {
    sd::PointF test(0., 0., 0.);
    std::cerr << test.x() << ", " << test.y() << ", " << test.z() << std::endl;
  }
  
  
  const sd::core::Vector3d<T> v1(0., -1.85066, 2.1519);
  const sd::core::Vector3d<T> v2(0., 2.1519, -2.50216);
  
  std::cerr << v1.x() << ", " << v1.y() << ", " << v1.z() << std::endl;
  std::cerr << v2.x() << ", " << v2.y() << ", " << v2.z() << std::endl;
  
  T teta = sd::core::angle(v1, v2);
  
  std::cerr << "Angle : " << teta << std::endl;
  
  
  {
    sd::core::MeshView_<T, N>* mesh = new sd::core::MeshView_<T, N>("", vertices, faces, sd::core::Vector<unsigned int>(), sd::core::Vector<sd::core::Normal<T>::type>(), colors);
    if (!sd::core::AttributeKey::containsKey("e1"))
      sd::core::AttributeKey::addNewKey("e1");
    sd::core::AttributeKey e1CurvatureKey = sd::core::AttributeKey::getKey("e1");
  
    typename sd::core::MeshView_<T, N>::vertices_const_geometry_iterator it = mesh->beginVerticesConstGeometry();
    const typename sd::core::MeshView_<T, N>::vertices_const_geometry_iterator begin = it;
    const typename sd::core::MeshView_<T, N>::vertices_const_geometry_iterator end = mesh->endVerticesConstGeometry();
    for (; it != end; ++it) {
      sd::core::VertexFromMeshView<T> target = *it;
      sd::core::DynamicDimensionalCoordinates<sd::core::Vector3d<T> > e1CurvatureSet;
      for (unsigned int i=0; i<40; ++i) {
	e1CurvatureSet.push_back(sd::core::Vector3d<T>((T)0., (T)0., (T)0.));
      }
      target.setAttribute<sd::core::DynamicDimensionalCoordinates<sd::core::Vector3d<T> > >(e1CurvatureKey, e1CurvatureSet);
      sd::core::DynamicDimensionalCoordinates<sd::core::Vector3d<T> > test(e1CurvatureSet);
    }
    
    delete mesh;
  }

  {
    std::cerr << "Start" << std::endl;
    std::vector<sd::core::MeshView_<T, N>*> meshes;
    sd::core::MeshView_<T, N>* mesh;
    
    sd::meshprocessing::noise::WhiteNoise<T> noise(.005);
    sd::core::MeshView_<T, N>* meshNoiseNormalOrientation = NULL;
    sd::core::MeshView_<T, N>* meshNoiseAllDirections = NULL;
    
    
    std::vector<sd::core::MeshView_<T, N>*> meshesSrc;
    for (unsigned int i=8; i<=128; i*=2) { // Generator meshes loading
      meshesSrc.push_back(sd::meshprocessing::generator::UVSphereGenerator<T, N>(2., i, i).getMesh());
    }
    
    for (unsigned int j=0; j<meshesSrc.size(); ++j) {
      mesh = new sd::core::MeshView_<T, N>(meshesSrc[j], meshesSrc[j]->name());
      // ADD Noise
      meshNoiseNormalOrientation = new sd::core::MeshView_<T, N>(mesh, mesh->name());
      sd::meshprocessing::noise::MeshNoiserNormalOrientation<T, N>(&noise).compute(meshNoiseNormalOrientation);
      meshNoiseNormalOrientation->setName("-NoiseNormalOrientation");
    
      // ADD Noise
      meshNoiseAllDirections = new sd::core::MeshView_<T, N>(mesh, mesh->name());
      sd::meshprocessing::noise::MeshNoiserAllDirections<T, N>(&noise).compute(meshNoiseAllDirections);
      meshNoiseAllDirections->setName("-NoiseAllDirections");
    
      meshes = std::vector<sd::core::MeshView_<T, N>*>({mesh,
	    meshNoiseNormalOrientation,
	    meshNoiseAllDirections});
      
      for (unsigned int i=0; i<10; ++i) {
	mesh = new sd::core::MeshView_<T, N>(mesh, mesh->name());
	meshes.push_back(mesh);
      }
      {
	T val=0.;
	sd::core::Vector3d<T> n;
	typename sd::core::MeshView_<T, N>::vertices_const_iterator it = mesh->beginVertices();
	const typename sd::core::MeshView_<T, N>::vertices_const_iterator end = mesh->endVertices();
	for (; it != end; ++it) {
	  n += (*it).getNormal();
	  val += (*it).x()+(*it).y()+(*it).z();
	}
      }
      delete mesh;
      meshes.pop_back();
      
      mesh = meshNoiseNormalOrientation;
      for (unsigned int i=0; i<10; ++i) {
	mesh = new sd::core::MeshView_<T, N>(mesh, mesh->name());
	meshes.push_back(mesh);
      }
      {
	T val=0.;
	sd::core::Vector3d<T> n;
	typename sd::core::MeshView_<T, N>::vertices_const_iterator it = mesh->beginVertices();
	const typename sd::core::MeshView_<T, N>::vertices_const_iterator end = mesh->endVertices();
	for (; it != end; ++it) {
	  n += (*it).getNormal();
	  val += (*it).x()+(*it).y()+(*it).z();
	}
      }
      delete mesh;
      meshes.pop_back();
      
      mesh = meshNoiseAllDirections;
      for (unsigned int i=0; i<10; ++i) {
	mesh = new sd::core::MeshView_<T, N>(mesh, mesh->name());
	meshes.push_back(mesh);
      }
      {
	T val=0.;
	sd::core::Vector3d<T> n;
	typename sd::core::MeshView_<T, N>::vertices_const_iterator it = mesh->beginVertices();
	const typename sd::core::MeshView_<T, N>::vertices_const_iterator end = mesh->endVertices();
	for (; it != end; ++it) {
	  n += (*it).getNormal();
	  val += (*it).x()+(*it).y()+(*it).z();
	}
      }
      delete mesh;
      meshes.pop_back();
    }
    
    T val=0.;
    sd::core::Vector3d<T> n;
    for (unsigned int i=0; i<meshes.size(); ++i) {
      typename sd::core::MeshView_<T, N>::vertices_const_iterator it = meshes[i]->beginVertices();
      const typename sd::core::MeshView_<T, N>::vertices_const_iterator end = meshes[i]->endVertices();
      for (; it != end; ++it) {
	n += (*it).getNormal();
	val += (*it).x()+(*it).y()+(*it).z();
      }
    }
    
    for (unsigned int i=0; i<meshesSrc.size(); ++i) {
      delete meshesSrc[i];
    }
    
    std::cerr << n.toString() << " : " << val << std::endl;
    
  }
  
  std::cerr << "Test valid" << std::endl;

  return EXIT_SUCCESS;
}
